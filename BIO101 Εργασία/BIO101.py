# -*- coding: utf-8 -*-
"""Bioimf101.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gzeL2E-f2TsUwOuflIyfcRaS0eAwmdpI
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

print("Choose how to provide the DNA sequence:")
print("1. Enter manually")
print("2. Load from a file")

choice = input("Enter your choice (1 or 2): ")

if choice == '1':
    dna_seq = input("Enter a DNA sequence: ").strip()
elif choice == '2':
    file_path = input("Enter the file path: ")
    try:
        with open(file_path, 'r') as file:
            dna_seq = file.read().strip()
    except FileNotFoundError:
        print("File not found. Please check the file path and try again.")
        exit()
else:
    print("Invalid choice. Exiting.")
    exit()

valid_bases = set('ATCG')
if not set(dna_seq.upper()).issubset(valid_bases):
    print("Error: Invalid DNA sequence. Please ensure it contains only A, T, C, and G.")
    exit()

dna_list_5_3 = list(dna_seq)
dna_list_3_5 = list(reversed(dna_list_5_3))

def separate_into_triplets(dna_list):
    return [dna_list[i:i+3] for i in range(0, len(dna_list), 3)]

triplet_list_5 = separate_into_triplets(dna_list_5_3)
triplet_list_3 = separate_into_triplets(dna_list_3_5)

start_triplet = ['A', 'T', 'G']
end_triplets = [['T', 'A', 'A'], ['T', 'G', 'A'], ['T', 'A', 'G']]

def find_sublists(triplet_list, start_triplet, end_triplets):
    sublists = []
    for i in range(len(triplet_list)):
        if triplet_list[i] == start_triplet:
            for j in range(i+1, len(triplet_list)):
                if triplet_list[j] in end_triplets:
                    sublists.append(triplet_list[i:j+1])
    return sublists if sublists else 'Specific sublist does not exist'

sublists_5 = find_sublists(triplet_list_5, start_triplet, end_triplets)
sublists_3 = find_sublists(triplet_list_3, start_triplet, end_triplets)

def convert_to_sequence(sublists):
    if isinstance(sublists, str):
        return sublists
    return [''.join([''.join(triplet) for triplet in sublist]) for sublist in sublists]

converted_sublists_5 = convert_to_sequence(sublists_5)
converted_sublists_3 = convert_to_sequence(sublists_3)

print('5 -> 3 Subsequences are:', converted_sublists_5)
print('3 -> 5 Subsequences are:', converted_sublists_3)